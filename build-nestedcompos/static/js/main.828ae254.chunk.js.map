{"version":3,"sources":["App_NestedCompos.js","reportWebVitals.js","index.js"],"names":["cellDefinitions","value","Math","floor","random","cellTexts","length","cellModalities","createArray","generator","Array","fill","undefined","map","_","index","Cell","props","useState","count","style","data","columnIndex","rowIndex","pivot1","App","nbRows","label","width","pivot2","height","nbColumns","createTable","table","columnCount","columnWidth","rowCount","rowHeight","itemData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAIIA,EAAkB,CACpB,iBAAO,CACLC,MAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,YAEzB,iBAAO,CACLH,MAAOI,EAAUH,KAAKC,MAAMD,KAAKE,SAAWC,EAAUC,WAExD,iBAAO,CACLL,MAAOM,EAAeL,KAAKC,MAAMD,KAAKE,SAAWG,EAAeD,WAElE,iBAAO,CACLL,MAAOC,KAAKE,SAAW,MAIvBG,EAAiB,CACnB,QACA,SACA,SACA,SACA,aACA,MACA,QACA,aACA,SACA,WAEEF,EAAY,CACd,QACA,MACA,UACA,MACA,MACA,QACA,QACA,QACA,OACA,OACA,OAEF,SAASG,EAAYF,EAAQG,GAC3B,OAAO,IAAIC,MAAMJ,GAAQK,UAAKC,GAAWC,KAAI,SAACC,EAAGC,GAAJ,OAAcN,EAAUM,MAqBvE,SAASC,EAAKC,GAEZ,OADAC,mBAASD,EAAME,YACKP,IAAhBK,EAAME,MACD,cAACH,EAAD,2BAAUC,GAAV,IAAiBE,MAAO,MAE7BF,EAAME,MAAQ,EACT,cAACH,EAAD,2BAAUC,GAAV,IAAiBE,MAAOF,EAAME,MAAQ,KAG7C,qBAAKC,MAAOH,EAAMG,MAAlB,SAEIH,EAAMI,KAAKA,KACTJ,EAAMK,YAAcL,EAAMM,SAAWN,EAAMI,KAAKG,OAAOlB,QACvDL,QAMK,SAASwB,IAAO,IAAD,EACZP,oBAAS,kBAvC3B,WACE,IACIQ,EAAS,IAEb,MAAO,CACLF,OAAQhB,EAJM,KAIiB,SAACO,GAAD,MAAY,CACzCY,MAAO,YAAcZ,EACrBa,MAAO,MAAwB,IAAhB1B,KAAKE,cAEtByB,OAAQrB,EAAYkB,GAAQ,SAACX,GAAD,MAAY,CACtCY,MAAO,YAAcZ,EACrBe,OAAQ,OAEVT,KAAMb,EAAYuB,KAAoB,SAAChB,GAAD,OACpCf,EAAiBe,EAAQW,EAAU1B,EAAgBM,cAyBxB0B,MAAxBC,EADqB,oBAE5B,OACE,cAAC,IAAD,UACG,gBAAGH,EAAH,EAAGA,OAAQF,EAAX,EAAWA,MAAX,OACC,cAAC,IAAD,CACEM,YAAaD,EAAMT,OAAOlB,OAC1B6B,YAAa,SAACpB,GAAD,OAAWkB,EAAMT,OAAOT,GAAOa,OAC5CQ,SAAUH,EAAMJ,OAAOvB,OACvB+B,UAAW,SAACtB,GAAD,OAAWkB,EAAMJ,OAAOd,GAAOe,QAC1CF,MAAOA,EACPE,OAAQA,EACRQ,SAAUL,EAPZ,SASGjB,OCnGX,IAYeuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.828ae254.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { VariableSizeGrid } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nlet cellDefinitions = [\n  () => ({\n    value: Math.floor(Math.random() * 100),\n  }),\n  () => ({\n    value: cellTexts[Math.floor(Math.random() * cellTexts.length)],\n  }),\n  () => ({\n    value: cellModalities[Math.floor(Math.random() * cellModalities.length)],\n  }),\n  () => ({\n    value: Math.random() < 0.5,\n  }),\n];\n\nlet cellModalities = [\n  \"Apple\",\n  \"Banana\",\n  \"Cherry\",\n  \"Durian\",\n  \"Elderberry\",\n  \"Fig\",\n  \"Grape\",\n  \"Honeyberry\",\n  \"Jujube\",\n  \"Kumquat\",\n];\nlet cellTexts = [\n  \"Alice\",\n  \"Bob\",\n  \"Charlie\",\n  \"Dan\",\n  \"Eve\",\n  \"Frank\",\n  \"Grace\",\n  \"Heidi\",\n  \"Ivan\",\n  \"Judy\",\n  \"Ken\",\n];\nfunction createArray(length, generator) {\n  return new Array(length).fill(undefined).map((_, index) => generator(index));\n}\nfunction createTable() {\n  let nbColumns = 100;\n  let nbRows = 50000;\n\n  return {\n    pivot1: createArray(nbColumns, (index) => ({\n      label: \"Country #\" + index,\n      width: 60 + ~~(Math.random() * 120),\n    })),\n    pivot2: createArray(nbRows, (index) => ({\n      label: \"Product #\" + index,\n      height: 34,\n    })),\n    data: createArray(nbColumns * nbRows, (index) =>\n      cellDefinitions[(index % nbRows) % cellDefinitions.length]()\n    ),\n  };\n}\n\nfunction Cell(props) {\n  useState(props.count);\n  if (props.count === undefined) {\n    return <Cell {...props} count={99} />;\n  }\n  if (props.count > 0) {\n    return <Cell {...props} count={props.count - 1} />;\n  }\n  return (\n    <div style={props.style}>\n      {\n        props.data.data[\n          props.columnIndex + props.rowIndex * props.data.pivot1.length\n        ].value\n      }\n    </div>\n  );\n}\n\nexport default function App() {\n  const [table] = useState(() => createTable());\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <VariableSizeGrid\n          columnCount={table.pivot1.length}\n          columnWidth={(index) => table.pivot1[index].width}\n          rowCount={table.pivot2.length}\n          rowHeight={(index) => table.pivot2[index].height}\n          width={width}\n          height={height}\n          itemData={table}\n        >\n          {Cell}\n        </VariableSizeGrid>\n      )}\n    </AutoSizer>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App_NestedCompos\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}